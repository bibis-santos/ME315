---
title: "Desafio 7"
author: "Bianca da Silva dos Santos"
format: html
editor: visual
---

## Desafio 7

#O desafio 7 constitue em rodar todos os codigos dos slides 7 de forma certa, e comentada.

#Carregando biblioteca e dados e fazendo uma cópia

```{r}
library(RSQLite)
library(tidyverse)
if(!"discoCopy.db" %in% list.files(".")){
  file.copy("disco.db", "discoCopy.db")
}
```

#Conectando ao banco copiado

```{r}
db <- dbConnect(SQLite(), "discoCopy.db")
db
```

#Visualizando o que tem no arquivo

```{r}
dbListTables(db)
```

#Criando uma tabela vazia

```{r}
if(!dbExistsTable(db, "instruments")){dbExecute(db, "CREATE TABLE instruments
                (AlbumId INTEGER,
                  TrackId INTEGER,
                  ElectricGuitar INTEGER,
                  Singer INTEGER,
                  Trumpet INTEGER)")
}

```

#Removendo uma tabela

```{r}
dbListFields(db,'instruments')
```

```{r}
dbExecute(db,"DROP TABLE instruments")
```

#Para melhores práticas

```{r}
sql = paste("SELECT ArtistId FROM artists",
            "WHERE Name = ?")
query <- dbSendQuery(db, sql)
dbBind(query, list("Gilberto Gil"))
aId <- dbFetch(query)
dbClearResult(query)
sql = paste('SELECT Title FROM albums',
            'WHERE ArtistId =', aId)
dbGetQuery(db, sql)
```

#Incluindo linhas numa tabela

```{r}
sql = paste('SELECT TrackId, Name FROM tracks',
            'WHERE AlbumId = 85')
dbGetQuery(db, sql) %>% head
```

#Incluindo linhas numa tabela

```{r}
if(!dbExistsTable(db, "instruments")){dbExecute(db, "CREATE TABLE instruments
                (AlbumId INTEGER,
                  TrackId INTEGER,
                  ElectricGuitar INTEGER,
                  Singer INTEGER,
                  Trumpet INTEGER)")
}
dbExecute(db,"INSERT INTO instruments
                VALUES ('85','1075', 0, 1, 0),('85','1078', 0, 1, 0); ")
```

# 

```{r}
dbGetQuery(db,"SELECT * FROM instruments")
```

#Usando o banco de dados mtcars

```{r}
dbWriteTable(db,"mtcars", mtcars, overwrite = TRUE)
dbListTables(db)
```

# 

```{r}
dbGetQuery(db,"SELECT * FROM mtcars") %>% head(3)
```

#Inserindo uma tabela diretamente: append

```{r}
theAvgCar <- mtcars %>%
  summarise_all(function(x) round(mean(x), 2))
theAvgCar
```

# 

```{r}
dbWriteTable(db,"mtcars", theAvgCar, append = TRUE)
dbGetQuery(db,"SELECT * FROM mtcars") %>% tail(3)
```

# 

```{r}
dbWriteTable(db,"mtcars", mtcars, overwrite = TRUE)
dbGetQuery(db,"SELECT * FROM mtcars") %>% tail(3)
```

```{r}
res <- dbSendQuery(db,"SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
  chunk <- dbFetch(res, n = 5)
  print(nrow(chunk))
}
```

#Criando uma base de dados própria

```{r}
airports <- read_csv("../Documentos/airports.csv",col_types = "cccccdd")
airlines <- read_csv("../Documentos/airlines.csv", col_types = "cc")
air <- dbConnect(SQLite(), dbname="../Documentos/air.db")
dbWriteTable(air, name = "airports", airports, overwrite = TRUE)
dbWriteTable(air, name = "airlines", airlines, overwrite = TRUE)
dbListTables(air)
```

#Dplyr

```{r}
library(RSQLite)
library(tidyverse)
library(dbplyr)
db <- dbConnect(SQLite(),"../Documentos/disco.db")
tracks <- tbl(db,"tracks") 
tracks %>% head(3)
```

```{r}
meanTracks <- tracks %>%
  group_by(AlbumId) %>%
  summarise(AvLen = mean(Milliseconds, na.rm = TRUE),
            AvCost = mean(UnitPrice, na.rm = TRUE))
meanTracks
```

```{r}
meanTracks %>% show_query()
```

```{r}
mT <- meanTracks %>% collect()
mT
```
